'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

var _index = require('./index');

var _hooks = require('./hooks');

var _createRequest = require('./createRequest');

var _createRequest2 = _interopRequireDefault(_createRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('isomorphic-fetch');
require('es6-promise').polyfill();

var BaseWebAPI = function () {
  function BaseWebAPI(options) {
    var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    (0, _classCallCheck3.default)(this, BaseWebAPI);
    var _options$baseEndpoint = options.baseEndpointURL;
    var baseEndpointURL = _options$baseEndpoint === undefined ? '' : _options$baseEndpoint;
    var _options$headers = options.headers;
    var headers = _options$headers === undefined ? {} : _options$headers;
    var _options$host = options.host;
    var host = _options$host === undefined ? 'localhost' : _options$host;
    var _options$protocol = options.protocol;
    var protocol = _options$protocol === undefined ? 'https' : _options$protocol;


    this._configSetUp(config);

    this.globalHeaders = headers;
    this.host = host.replace('/', '');
    this.baseEndpointURL = baseEndpointURL.replace(/^\/|\/$/g, '');
    this.protocol = protocol.replace('://', '');

    this.baseURL = baseEndpointURL ? this.protocol + '://' + this.host + '/' + this.baseEndpointURL : this.protocol + '://' + this.host;

    this.hooks = {
      after: [],
      before: [],
      error: []
    };

    this._executionList = [this._preProcessRequest, this._executeRequest, this._errorProcessResponse, this._unpackResponse, this._postProcessResponse];

    this._requestTransformations = [];
    this._responseTransformations = [];
    this._errorTransformations = [];
  }

  (0, _createClass3.default)(BaseWebAPI, [{
    key: 'get',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(url, options) {
        var reqOptions = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.clearRequestContext();
                return _context.abrupt('return', this.fetchRequest((0, _createRequest2.default)('GET', this, url, options, reqOptions)));

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get(_x2, _x3, _x4) {
        return _ref.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: 'post',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(url, options) {
        var reqOptions = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.clearRequestContext();
                return _context2.abrupt('return', this.fetchRequest((0, _createRequest2.default)('POST', this, url, options, reqOptions)));

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function post(_x6, _x7, _x8) {
        return _ref2.apply(this, arguments);
      }

      return post;
    }()
  }, {
    key: 'put',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(url, options) {
        var reqOptions = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.clearRequestContext();
                return _context3.abrupt('return', this.fetchRequest((0, _createRequest2.default)('PUT', this, url, options, reqOptions)));

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function put(_x10, _x11, _x12) {
        return _ref3.apply(this, arguments);
      }

      return put;
    }()
  }, {
    key: 'delete',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(url, options) {
        var reqOptions = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.clearRequestContext();
                return _context4.abrupt('return', this.fetchRequest((0, _createRequest2.default)('DELETE', this, url, options, reqOptions)));

              case 2:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _delete(_x14, _x15, _x16) {
        return _ref4.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: '_configSetUp',
    value: function _configSetUp(config) {
      if (!config) return;

      var _config$afterRequest = config.afterRequest;
      var afterRequest = _config$afterRequest === undefined ? this.afterRequest : _config$afterRequest;
      var _config$beforeRequest = config.beforeRequest;
      var beforeRequest = _config$beforeRequest === undefined ? this.beforeRequest : _config$beforeRequest;
      var _config$clearRequestC = config.clearRequestContext;
      var clearRequestContext = _config$clearRequestC === undefined ? this.clearRequestContext : _config$clearRequestC;
      var _config$errorRequest = config.errorRequest;
      var errorRequest = _config$errorRequest === undefined ? this.errorRequest : _config$errorRequest;
      var _config$fetchRequest = config.fetchRequest;
      var fetchRequest = _config$fetchRequest === undefined ? this.fetchRequest : _config$fetchRequest;
      var _config$runHooks = config.runHooks;
      var runHooks = _config$runHooks === undefined ? this.runHooks : _config$runHooks;


      this._afterRequest = this.afterRequest;
      this._beforeRequest = this.beforeRequest;
      this._clearRequestContext = this.clearRequestContext, this._errorRequest = this.errorRequest;
      this._fetchRequest = this.fetchRequest;
      this._runHooks = this.runHooks;
      this.afterRequest = afterRequest;
      this.beforeRequest = beforeRequest;
      this.clearRequestContext = clearRequestContext, this.errorRequest = errorRequest;
      this.fetchRequest = fetchRequest;
      this.runHooks = runHooks;
    }
  }, {
    key: 'fetchRequest',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(req) {
        var returnValue, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, func, _ref6, _ref6$req;

        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                returnValue = req;
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context5.prev = 4;
                _iterator = (0, _getIterator3.default)(this._executionList);

              case 6:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context5.next = 17;
                  break;
                }

                func = _step.value;
                _context5.next = 10;
                return func.call(this, returnValue, req);

              case 10:
                _ref6 = _context5.sent;
                returnValue = _ref6.returnValue;
                _ref6$req = _ref6.req;
                req = _ref6$req === undefined ? req : _ref6$req;

              case 14:
                _iteratorNormalCompletion = true;
                _context5.next = 6;
                break;

              case 17:
                _context5.next = 23;
                break;

              case 19:
                _context5.prev = 19;
                _context5.t0 = _context5['catch'](4);
                _didIteratorError = true;
                _iteratorError = _context5.t0;

              case 23:
                _context5.prev = 23;
                _context5.prev = 24;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 26:
                _context5.prev = 26;

                if (!_didIteratorError) {
                  _context5.next = 29;
                  break;
                }

                throw _iteratorError;

              case 29:
                return _context5.finish(26);

              case 30:
                return _context5.finish(23);

              case 31:
                return _context5.abrupt('return', returnValue);

              case 32:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this, [[4, 19, 23, 31], [24,, 26, 30]]);
      }));

      function fetchRequest(_x18) {
        return _ref5.apply(this, arguments);
      }

      return fetchRequest;
    }()
  }, {
    key: '_preProcessRequest',
    value: function _preProcessRequest(req) {
      var originalRequest = (0, _extends3.default)({}, req);

      // Execute any before hooks
      req = this.beforeRequest(req);

      req.fetchUrl = '' + req.url;
      if (req.queryParams && (0, _keys2.default)(req.queryParams).length) {
        req.fetchUrl += '?' + (0, _index.objectToQueryString)(req.queryParams, req.queryParamMappings);
      }

      return { returnValue: req };
    }
  }, {
    key: '_executeRequest',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(req) {
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return fetch(req.fetchUrl, req.params);

              case 2:
                _context6.t0 = _context6.sent;
                _context6.t1 = req;
                return _context6.abrupt('return', {
                  returnValue: _context6.t0,
                  req: _context6.t1
                });

              case 5:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function _executeRequest(_x19) {
        return _ref7.apply(this, arguments);
      }

      return _executeRequest;
    }()
  }, {
    key: '_unpackResponse',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(response) {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return response.json();

              case 2:
                _context7.t0 = _context7.sent;
                return _context7.abrupt('return', {
                  returnValue: _context7.t0
                });

              case 4:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _unpackResponse(_x20) {
        return _ref8.apply(this, arguments);
      }

      return _unpackResponse;
    }()
  }, {
    key: '_errorProcessResponse',
    value: function _errorProcessResponse(response, originalRequest) {
      if (!response.ok) {
        var unpackedResponse = this._unpackResponse(response);
        // Run through error hooks and throw the Error with the message
        // being the jsonified response given by the error hook(s)
        var errorResponse = this.errorRequest(unpackedResponse, response, originalRequest);
        if (errorResponse) {
          throw Error((0, _stringify2.default)(response));
        }
      }

      return { returnValue: response };
    }
  }, {
    key: '_postProcessResponse',
    value: function _postProcessResponse(unpackedResponse, originalRequest) {
      // Execute after request hooks
      var processedJson = this.afterRequest(unpackedResponse, originalRequest);

      processedJson._metadata = {
        baseEndpointURL: this.baseEndpointURL,
        baseURL: this.baseURL,
        requestTranformations: this._requestTransformations,
        responseTranformations: this._responseTransformations,
        parsedRequestURL: (0, _urlParse2.default)(originalRequest.fetchUrl)
      };

      return { returnValue: processedJson };
    }
  }, {
    key: 'runHooks',
    value: function runHooks(params) {
      var _this = this;

      var hooks = params.hooks;
      var _params$secondaryObjs = params.secondaryObjs;
      var secondaryObjs = _params$secondaryObjs === undefined ? [] : _params$secondaryObjs;
      var sort = params.sort;
      var transformationHistory = params.transformationHistory;
      var transformationObj = params.transformationObj;
      var transformType = params.transformType;
      var type = params.type;

      // Sort hooks

      hooks.sort(sort);

      var newObj = (0, _extends3.default)({}, transformationObj);

      hooks.forEach(function (hook) {
        var _hook$type;

        var preTransformObj = (0, _create2.default)({ id: hook.id });
        preTransformObj[transformType] = transformationObj;
        transformationHistory.push(preTransformObj);

        newObj = (_hook$type = hook[type]).call.apply(_hook$type, [_this, newObj].concat((0, _toConsumableArray3.default)(secondaryObjs)));
      });

      return newObj;
    }
  }, {
    key: 'beforeRequest',
    value: function beforeRequest(req) {
      return this.runHooks({
        hooks: this.hooks.before,
        sort: _hooks.sortBefore,
        transformationHistory: this._requestTransformations,
        transformationObj: req,
        transformType: 'request',
        type: 'before'
      });
    }
  }, {
    key: 'afterRequest',
    value: function afterRequest(res, req) {
      return this.runHooks({
        hooks: this.hooks.after,
        secondaryObjs: [req],
        sort: _hooks.sortAfter,
        transformationHistory: this._responseTransformations,
        transformationObj: res,
        transformType: 'response',
        type: 'after'
      });
    }
  }, {
    key: 'errorRequest',
    value: function errorRequest(jsonRes, res, req) {
      return this.runHooks({
        hooks: this.hooks.error,
        secondaryObjs: [res, req],
        sort: _hooks.sortAfter,
        transformationHistory: this._errorTransformations,
        transformationObj: jsonRes,
        transformType: 'response',
        type: 'error'
      });
    }
  }, {
    key: 'clearRequestContext',
    value: function clearRequestContext() {
      this._requestTransformations = [];
      this._responseTransformations = [];
      this._errorTransformations = [];
    }
  }]);
  return BaseWebAPI;
}();

exports.default = BaseWebAPI;